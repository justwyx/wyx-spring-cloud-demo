<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.3.7.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.wyx</groupId>
    <artifactId>spring-cloud-demo</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>pom</packaging>
    <description>
        spring cloud api demo
        00-eurekaserver-8000 : eureka注册中心

        00-eurekaserver-8100
        00-eurekaserver-8200
        00-eurekaserver-8300 ： eureka 集群

        01-consumer-8080
        01-provider-8081 ：无注册中心 restTemplate 访问

        02-consumer-8080
        02-provider-8081 ：eureka注册中心 restTemplate 访问

        03: OpenFeign 与 Ribbon
            OpenFeign : 声明式 REST 客户端:Feign 通过使用 JAX-RS(Java Api eXtensions for RESTful Web Services，简单来说，就是一种使用注解来实现 RESTful 的技术)或 SpringMVC 注解的装饰方 式，生成接口的动态实现。
                Feign，假装，伪装。
                OpenFeign 可以将提供者提供的 Restful 服务伪装为接口进行消费，消费者只需使用“feign 接口 + 注解”的方式即可直接调用提供者提供的 Restful 服务，而无需再使用 RestTemplate。
                需要注意:
                 该伪装的Feign接口是由消费者调用，与提供者没有任何关系。  Feign仅是一个伪客户端，其不会对请求做任何处理。
                 Feign是通过注解的方式实现RESTful请求的。
            Ribbon :
                Ribbon 是 Netflix 公司的一个开源的负载均衡 项目，是一个客户端负载均衡器，运行在消费者端。
                OpenFeign 也是运行在消费者端的，使用 Ribbon 进行负载均衡，所以 OpenFeign 直接内 置了 Ribbon。即在导入 OpenFeign 依赖后，无需再专门导入 Ribbon 依赖了。
        03-consumer-feign-8080
        03-provider-8081 : 超时设置
        03-provider-8082
        03-provider-8083
        03-provider-8084 : 集群负载均衡测试

        04: Hystrix 服务熔断与服务降级
            熔断机制 :
                熔断机制是服务雪崩的一种有效解决方案。常见的熔断有两种:
                 预熔断
                 即时熔断
            服务降级 :
                服务降级是请求发生问题后的一种增强用户体验的方式。
                发生服务熔断，一定会发生服务降级。但发生服务降级，并不意味着一定是发生了服务 熔断。
            Hystrix : Spring Cloud 是通过 Hystrix 来实现服务熔断与降级的。
                在分布式环境中，许多服务依赖中的一些服务发生失败是不可避免的。Hystrix 是一 个库，通过添加延迟容忍和容错逻辑，帮助你控制这些分布式服务之间的交互。Hystrix 通过 隔离服务之间的访问点、停止跨服务的级联故障以及提供回退选项来实现这一点，所有这些 都可以提高系统的整体弹性。
        # 需要注意，要用 //@EnableCircuitBreaker // 开启熔断器
        04-consumer-fallbackmethod-8080 ： RestTemplate 方式服务降级（方法级别）
        04-consumer-feign-fallbackmethod-8080 ： feign 方式服务降级（方法级别）
        04-consumer-fallbackfactory-8080 ：feign 方式服务降级（类级别）
        04-consumer-fallbackfeign-8080 ：feign 方式服务降级（类级别）
        # 单机-仪表盘，用处不大
        04-consumer-dashboard-8080 : dashboard-监控仪表盘
        # 集群版-仪表盘
        00-hystrix-turbine-8888
        04-consumer-turbine-client-8180
        04-consumer-turbine-client-8280
        # 集群分组-仪表盘
        00-hystrix-turbine-7777
        04-consumer-turbine-client-8380
        04-consumer-turbine-client-8480
        04-consumer-turbine-client-8580
        04-consumer-turbine-client-8680
        # 发送服务降级警报
        04-consumer-alarm-8080

        # zuul
        # 网关是系统唯一对外的入口，介于客户端与服务器端之间，用于对请求进行鉴权、限流、 路由、监控等功能。
        # Zuul 主要提供了对请求的路由与过滤功能。
            # 路由:将外部请求转发到具体的微服务实例上，是外部访问微服务的统一入口。
            # 过滤:对请求的处理过程进行干预，对请求进行校验、鉴权等处理。

        # zuul 路由
        00-zuul-9000
        05-zuul-consumer-8080
        05-zuul-consumer-8090
        # zuul 负载均衡
        05-zuul-consumer-8180
        05-zuul-consumer-8280
        05-zuul-consumer-8380
        # zuul 服务降级
        00-zuul-fallback-9000
        # zuul 请求过滤
            # 在服务路由之前、中、后，可以对请求进行过滤，使其只能访问它应该访问到的资源，增强安全性。此时需要通过 ZuulFilter 过滤器来实现对外服务的安全控制。
        00-zuul-filter-9000
        # zuul 令牌桶限流
        00-zuul-tokenbucket-9000
        # zuul 多维请求限流
        00-zuul-ratelimit-9000
        # zuul 灰度发布
        00-zuul-gray-9000
    </description>

    <modules>
        <module>00-eurekaserver-8000</module>
<!--        <module>00-eurekaserver-8100</module>-->
<!--        <module>00-eurekaserver-8200</module>-->
<!--        <module>00-eurekaserver-8300</module>-->

<!--        <module>01-consumer-8080</module>-->
<!--        <module>01-provider-8081</module>-->

<!--        <module>02-consumer-8080</module>-->
<!--        <module>02-provider-8081</module>-->

<!--        <module>03-consumer-feign-8080</module>-->
<!--        <module>03-provider-8081</module>-->
<!--        <module>03-provider-8082</module>-->
<!--        <module>03-provider-8083</module>-->
<!--        <module>03-provider-8084</module>-->

<!--        <module>04-consumer-feign-fallbackmethod-8080</module>-->
<!--        <module>04-consumer-fallbackmethod-8080</module>-->
<!--        <module>04-consumer-fallbackfactory-8080</module>-->
<!--        <module>04-consumer-fallbackfeign-8080</module>-->
<!--        <module>04-consumer-dashboard-8080</module>-->
<!--        <module>00-hystrix-turbine-8888</module>-->
<!--        <module>04-consumer-turbine-client-8180</module>-->
<!--        <module>04-consumer-turbine-client-8280</module>-->
<!--        <module>00-hystrix-turbine-7777</module>-->
<!--        <module>04-consumer-turbine-client-8380</module>-->
<!--        <module>04-consumer-turbine-client-8480</module>-->
<!--        <module>04-consumer-turbine-client-8580</module>-->
<!--        <module>04-consumer-turbine-client-8680</module>-->
<!--        <module>04-consumer-alarm-8080</module>-->
<!--        <module>04-provider-8081</module>-->

<!--        <module>00-zuul-9000</module>-->
<!--        <module>05-zuul-consumer-8080</module>-->
<!--        <module>05-zuul-consumer-8090</module>-->
<!--        <module>05-zuul-consumer-8180</module>-->
<!--        <module>05-zuul-consumer-8280</module>-->
<!--        <module>05-zuul-consumer-8380</module>-->
<!--        <module>00-zuul-fallback-9000</module>-->
<!--        <module>00-zuul-filter-9000</module>-->
<!--        <module>00-zuul-tokenbucket-9000</module>-->
<!--        <module>00-zuul-ratelimit-9000</module>-->
<!--        <module>00-zuul-gray-9000</module>-->
    </modules>


    <properties>
        <spring.cloud-version>Hoxton.SR9</spring.cloud-version>

        <mysql-connector-java.version>8.0.20</mysql-connector-java.version>
        <druid.version>1.1.10</druid.version>

        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
    </properties>
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring.cloud-version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!--修改MySQL驱动版本-->
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>${mysql-connector-java.version}</version>
                <scope>runtime</scope>
            </dependency>
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid</artifactId>
                <version>${druid.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
    </dependencies>

</project>